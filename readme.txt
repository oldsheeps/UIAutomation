Framework Explain：
    基于Selenium Web自动化工具进行二次封装的自动化工具；
        它支持无限实例化webdriver类，但仍可以保持统一浏览器对象；
        它支持使用自定义的方法、它非继承但又支持所有基类定义的方法；
    封装了50+页面行为事件方法：
        基础行为：创建浏览器对象、定位、点击、输入、清空、等待、截图、获取页面信息、下拉框选择、切换窗口、切换Frame框架、执行script、滑动滚动条；
        用户行为：定位一组元素点击全部或某一个、矩形标记元素并截图、判断元素是否存在、点击并跳转新窗口、弹出框（关闭/取消/获取文本）、断言（文本/属性/弹框）等等；

    利用了工厂模式将浏览器启动、所有关键字方法进行了中英文的等值互换。
    对Chrome浏览器进行了中文、无可视化界面、伪装请求头、屏蔽异常提示、屏蔽提示保存密码等配置。


代码结构说明：
    base：   浏览器对象、关键字方法封装类
    biz ：   业务行为执行层
    case：   测试用例层
    common： 常规公共方法层（BranchFactory关键字等值互换类、ExcelConf回填文件配置类、LogWrapper日志记录器、PictureDispose截图矩形标记类、ReadExcel读取测试用例传递到biz层）
    logs：   日志文件存放层（以天为单位生成）
    picture：截图存放（error_pic存放异常导致用例执行失败的截图、proce_pic存放测试用例过程中截图）
        ——Main.py 程序执行入口


编写用例说明：
    Excel字段列名：执行编号、执行操作、定位方法、定位路径、输入文本、步骤描述、预期结果、实际结果
    执行编号：当前步骤的序号，如不填写便等同于注释（程序会以此判断是否执行回填Pass/Failed/Screenshot/Info）
    执行操作：当前步骤的行为方法，如点击、输入等
    定位方法：使用哪种方式进行元素定位
    定位路径：与定位方法所匹配的定位元素值
    输入文本：当前步骤需要输入文本数据
    步骤描述：当前步骤相关说明（无关紧要，但日志中会以此针对每一步骤进行记录）
    预期结果：针对断言进行的预想值声明（下拉选择也需要此列进行指定下拉方式）
    实际结果：每一步骤执行完毕后会回填Pass/Failed/Screenshot/Info


异常场景说明：
    1.考虑用例编写难度：特以中文编写利用工厂模式进行等值互换，即写入点击、输入，实际传入后台的是click、input；
    2.考虑用例多而杂乱：特以case文件设定测试用例目录，该目录下所有以.xlsx结尾均视为测试用例文件，每个文件中每个Sheet页均视为测试用例；
    3.考虑元素定位精准：进行等待处理，通过异常捕捉手段先以10秒显示等待元素存在，再判断是否可见、之后再尝试普通定位；
    4.考虑工具执行效率：针对每一步骤判断是否通过，发生任何异常均将后续步骤视为失败，并在当前所处界面截图保留后跳过当前用例；
    5.考虑错误截图查找：针对每一个错误截图以sheet名+步骤序号+当前时间戳命名；
    6.考虑工具的易用性：执行过程中将使用元素定位关键字的步骤均设置为高亮闪烁可视化执行（需要关闭Chrome无可视化界面）；
    7.考虑查错的便捷性：执行每一个测试用例文件、每一条测试用例、每一步骤都记录日志，异常情况也会回溯；


   # 正则表达式方法
  def regular_expression(self, pattern, string):
        """
        正则表达式。pattern:匹配的正则表达式 ; string:要匹配的字符串;
        :param pattern: 匹配的正则表达式
        :param string: 要匹配的字符串
        :return: 成功返回True、错误返回False
        """
        if re.match(pattern, string) is not None:
            return True
        elif re.match(pattern, string) is None:
            return False



更新
git add
git commit
git push